#!/usr/bin/python2.7
from sound_writer import *
import math

SAMPLE_RATE = 44100 # 2*2*3*3*5*5*7*7
TEMPERAMENT = 2.0**(1.0/12.0)
TUNING_NOTE = 440.0
BEAT_LENGTH = 60.0/300.0

total_length = 420*2+11

notes = [(60, 278.0, 2.0), (57, 280.0, 4.0), (55, 284.0, 2.0), (53, 286.0, 2.0), (55, 288.0, 2.0), (57, 290.0, 2.0), (64, 308.0, 2.0), (60, 310.0, 2.0), (62, 312.0, 2.0), (64, 314.0, 2.0), (60, 316.0, 2.0), (57, 318.0, 10.0), (60, 340.0, 2.0), (63, 342.0, 10.0), (64, 352.0, 2.0), (60, 354.0, 2.0), (62, 356.0, 2.0), (59, 358.0, 2.0), (60, 360.0, 4.0), (57, 364.0, 20.0), (57, 392.0, 16.0), (60, 392.75, 15.25), (64, 393.625, 14.375), (57, 408.0, 2.0), (59, 408.0, 2.0), (62, 408.0, 2.0), (57, 412.0, 4.0), (60, 412.0, 4.0), (64, 412.0, 4.0), (57, 416.0, 2.0), (59, 416.0, 2.0), (62, 416.0, 2.0), (57, 418.0, 1.0), (60, 418.0, 1.0), (64, 418.0, 1.0), (57, 422.0, 1.0), (60, 422.0, 1.0), (64, 422.0, 1.0), (47, 448.0, 16.0), (50, 448.0, 16.0), (55, 448.0, 16.0), (45, 464.0, 8.0), (48, 464.0, 8.0), (52, 464.0, 8.0), (53, 472.0, 8.0), (57, 480.0, 4.0), (60, 484.0, 2.0), (57, 486.0, 2.0), (55, 488.0, 2.0), (52, 490.0, 2.0), (55, 492.0, 2.0), (57, 494.0, 2.0), (64, 564.0, 2.0), (60, 566.0, 2.0), (62, 568.0, 2.0), (64, 570.0, 2.0), (60, 572.0, 2.0), (57, 574.0, 2.0), (57, 576.0, 16.0), (64, 592.0, 8.0), (57, 620.0, 2.0), (60, 624.0, 16.0), (64, 644.0, 2.0), (60, 646.0, 2.0), (62, 648.0, 2.0), (59, 650.0, 2.0), (60, 652.0, 4.0), (57, 656.0, 14.0), (52, 670.0, 2.0), (55, 672.0, 2.0), (52, 674.0, 2.0), (55, 676.0, 2.0), (57, 678.0, 1.0), (57, 692.0, 1.0), (45, 700.0, 1.0), (48, 712.0, 16.0), (52, 712.0, 16.0), (57, 704.0, 24.0), (50, 730.0, 1.0), (53, 730.0, 1.0), (50, 734.0, 1.0), (53, 734.0, 1.0), (45, 736.0, 16.0), (48, 736.0, 16.0), (52, 736.0, 16.0), (60, 752.0, 2.0), (57, 754.0, 2.0), (55, 756.0, 2.0), (52, 758.0, 2.0), (55, 760.0, 2.0), (57, 762.0, 6.0), (57, 772.0, 12.0), (60, 772.75, 11.25), (64, 773.625, 10.375), (60, 784.0, 2.0), (57, 786.0, 2.0), (53, 788.0, 2.0), (52, 790.0, 10.0), (52, 800.0, 40.0), (57, 800.75, 39.25), (60, 801.625, 38.375), (52, 912.0, 2.0), (60, 920.0, 24.0), (52, 944.0, 2.0), (50, 948.0, 2.0), (48, 950.0, 2.0), (47, 952.0, 2.0), (50, 954.0, 2.0), (48, 956.0, 20.0), (45, 976.0, 1.0), (45, 984.0, 1.0), (45, 990.0, 1.0), (45, 992.0, 1.0), (45, 1022.0, 1.0), (45, 1024.0, 1.0), (52, 1060.0, 1.0), (65, 1070.0, 1.0), (64, 1072.0, 2.0), (65, 1074.0, 2.0), (62, 1076.0, 2.0), (64, 1078.0, 2.0), (59, 1080.0, 16.0), (60, 1126.0, 2.0), (57, 1128.0, 4.0), (55, 1132.0, 2.0), (52, 1134.0, 2.0), (55, 1136.0, 2.0), (57, 1138.0, 2.0), (59, 1172.0, 12.0), (57, 1188.0, 4.0), (53, 1192.0, 2.0), (52, 1194.0, 2.0), (50, 1196.0, 4.0), (48, 1200.0, 8.0), (45, 1208.0, 8.0), (45, 1216.0, 16.0), (48, 1216.0, 16.0), (50, 1232.0, 16.0), (53, 1232.0, 16.0), (57, 1232.0, 16.0), (59, 1252.0, 4.0), (60, 1256.0, 2.0), (57, 1258.0, 2.0), (55, 1260.0, 2.0), (53, 1262.0, 2.0), (52, 1264.0, 8.0), (57, 1276.0, 12.0), (57, 1296.0, 16.0), (60, 1296.75, 15.25), (64, 1297.625, 14.375), (52, 1320.0, 24.0), (57, 1320.75, 23.25), (60, 1321.625, 22.375), (57, 1344.0, 16.0), (59, 1344.0, 16.0), (62, 1344.0, 16.0), (64, 1344.0, 16.0), (53, 1368.0, 1.0), (57, 1368.0, 1.0), (59, 1368.0, 1.0), (62, 1368.0, 1.0), (64, 1368.0, 1.0), (53, 1370.0, 1.0), (57, 1370.0, 1.0), (59, 1370.0, 1.0), (62, 1370.0, 1.0), (64, 1370.0, 1.0), (53, 1378.0, 1.0), (57, 1378.0, 1.0), (59, 1378.0, 1.0), (62, 1378.0, 1.0), (64, 1378.0, 1.0), (52, 1392.0, 2.0), (57, 1392.0, 2.0), (62, 1392.0, 2.0), (65, 1392.0, 2.0), (64, 1394.0, 2.0), (62, 1396.0, 2.0), (60, 1398.0, 2.0), (64, 1400.0, 6.0), (60, 1406.0, 6.0), (57, 1412.0, 12.0), (52, 1424.0, 2.0), (57, 1424.0, 2.0), (60, 1424.0, 2.0), (57, 1426.0, 2.0), (48, 1428.0, 2.0), (52, 1428.0, 2.0), (55, 1428.0, 2.0), (52, 1430.0, 2.0), (47, 1432.0, 2.0), (50, 1432.0, 2.0), (55, 1432.0, 2.0), (48, 1434.0, 2.0), (52, 1434.0, 2.0), (57, 1434.0, 2.0), (52, 1448.0, 8.0), (57, 1448.75, 7.25), (60, 1449.625, 6.375), (52, 1456.0, 1.0), (57, 1456.0, 1.0), (60, 1456.0, 1.0), (52, 1458.0, 1.0), (57, 1458.0, 1.0), (60, 1458.0, 1.0), (52, 1462.0, 1.0), (57, 1462.0, 1.0), (60, 1462.0, 1.0), (52, 1466.0, 1.0), (57, 1466.0, 1.0), (60, 1466.0, 1.0), (52, 1470.0, 1.0), (57, 1470.0, 1.0), (60, 1470.0, 1.0), (52, 1472.0, 16.0), (57, 1472.75, 15.25), (60, 1473.625, 14.375), (45, 1492.0, 4.0), (52, 1498.0, 1.0), (52, 1502.0, 1.0), (57, 1504.0, 4.0), (60, 1504.0, 4.0), (64, 1504.0, 4.0), (57, 1508.0, 4.0), (59, 1508.0, 4.0), (62, 1508.0, 4.0), (64, 1508.0, 4.0), (57, 1512.0, 4.0), (60, 1512.0, 4.0), (64, 1512.0, 4.0), (57, 1516.0, 4.0), (59, 1516.0, 4.0), (62, 1516.0, 4.0), (64, 1516.0, 4.0), (60, 1520.75, 15.25), (53, 1568.0, 112.0), (55, 1600.0, 80.0), (57, 1520.0, 160.0), (59, 1536.0, 144.0), (60, 1568.0, 112.0), (62, 1536.0, 144.0), (64, 1521.625, 158.375), (66, 1632.0, 48.0)]

bends = [((22*8 + 4, 22*8 + 6), (0, 1)),
         ((40*8 + 1, 40*8 + 4), (0, 2)),
         ((45*8, 45*8 + 2), (-2, 0)),
         ((50*8+3, 50*8 + 4), (-2, 0)),
         ((68*8+5, 69*8+1), (0, -2)),
         ((74*8+2, 74*8+4), (0, 1)),
         ((80*8, 80*8+2), (-2, 0)),

         ((96*8,96*8+4), (0,-4)),
         ((96*8+4,97*8), (-4,0)),
         ((97*8,97*8+4), (0,4)),
         ((97*8+4,98*8), (4,0)),
         ((98*8,98*8+4), (0,-4)),
         ((98*8+4,99*8), (-4,0)),
         ((99*8,99*8+4), (0,4)),
         ((99*8+4,100*8), (4,0)),
         ((100*8,100*8+4), (0,-4)),
         ((100*8+4,101*8), (-4,0)),
         ((101*8,101*8+4), (0,4)),
         ((101*8+4,102*8), (4,0)),
         ((102*8,102*8+4), (0,-4)),
         ((102*8+4,103*8), (-4,0)),
         ((103*8,103*8+4), (0,4)),
         ((103*8+4,104*8), (4,0)),
         ((104*8,104*8+4), (0,-4)),
         ((104*8+4,105*8), (-4,0)),
         ((105*8,105*8+4), (0,4)),
         ((105*8+4,106*8), (4,0)),
         ]

flat_trills = []

vibratos = [(20*8+7, 21*8+4),
            (24*8, 25*8),
            (25*8+6, 26*8+2),
            (29*8+2, 30*8+4),
            (37*8, 37*8+4),
            (38*8, 38*8+4),
            (42*8+4, 42*8+7),
            (45*8+4, 46*8+4),
            (47*8+2, 48*8),
            (49*8+2, 50*8),
            (50*8+4, 51*8),
            (52*8, 53*8+4, 1),
            (59*8, 60*8),
            (61*8, 62*8),
            (76*8, 77*8),
            (77*8+2, 78*8),
            (78*8+2, 79*8),
            (81*8+1, 81*8+4),
            (84*8, 86*8),
            (89*8+4, 90*8),
            (93*8, 94*8)
            ]


for i in range(len(bends)):
    bends[i] = ((float(bends[i][0][0]-8),float(bends[i][0][1]-8)),(float(bends[i][1][0]), float(bends[i][1][1])))
for i in range(len(flat_trills)):
    flat_trills[i] = (float(flat_trills[i][0]-8),float(flat_trills[i][1]-8))
for i in range(len(vibratos)):
    vibratos[i] = (float(vibratos[i][0]-8),float(vibratos[i][1]-8))

def bend(pos):
    for b in bends:
        if pos >= b[0][0] and pos <= b[0][1]:
            return (pos - b[0][0])/(b[0][1] - b[0][0]) * b[1][1] + (1.0 - (pos - b[0][0])/(b[0][1] -b[0][0])) * b[1][0]
    return False

def flat_trill(pos):
    for tr in flat_trills:
        if pos >= tr[0] and pos <= tr[1]:
            return True
    return False

def vibrato(pos):
    for vb in vibratos:
        if pos >= vb[0] and pos <= vb[1]:
            if len(vb) > 2:
                return 10
            return 1
    return 0

print "Length:", total_length * BEAT_LENGTH, "seconds"

def synth_note(note, start, length, vol=1.0, overtones=[1], attacking=False, vib_phase=800.0*math.pi*2, vib_shift=0.02):
    samples = int(length * SAMPLE_RATE * BEAT_LENGTH)
    ch = [0.0] * samples
    freq = TUNING_NOTE * (TEMPERAMENT**note)
    
    cur_pos = 0.0

    max_amp = 0.0
    bend_amount = 0.0
    trilling = False
    for i in xrange(samples):
        cur_bend = bend(start + (float(i)/samples)*length)
        if cur_bend != False:
            bend_amount = cur_bend
        cur_trilling = flat_trill(start + (float(i)/samples)*length)
        if trilling and not cur_trilling:
            if math.sin(i/vib_phase/2*math.pi*2) - 1.0 > -0.01:
                trilling = False
        if not trilling and cur_trilling:
            if math.sin(i/vib_phase/2*math.pi*2) - 1.0 > -0.01:
                trilling = True
        vib = vibrato(start + (float(i)/samples)*length)
        cur_pos += (1.0 + math.sin(i/vib_phase*math.pi*2)*vib_shift*vib +
                    (math.sin(i/vib_phase/2*math.pi*2) - 1.0)/2*-(1.0 - TEMPERAMENT)*(1 if trilling else 0) +
                    bend_amount * -(1.0 - TEMPERAMENT))/SAMPLE_RATE
        #cur_pos += 1.0
        for tone in overtones:
            x = cur_pos * freq * tone
            cur = math.sin(x * math.pi*2)
            cur /= tone
            if i >= (BEAT_LENGTH*SAMPLE_RATE*0.02) or attacking:
                #cur *= (1.0 - i/float(samples))/tone
                if i >= samples - (BEAT_LENGTH*SAMPLE_RATE*0.02):
                    #print ((i - samples + (BEAT_LENGTH*SAMPLE_RATE*0.02)))/(BEAT_LENGTH*SAMPLE_RATE*0.02))))
                    cur *= 1.0 - (i - samples + (BEAT_LENGTH*SAMPLE_RATE*0.02))/(BEAT_LENGTH*SAMPLE_RATE*0.02)
            else:
                cur *= (i/(BEAT_LENGTH*SAMPLE_RATE*0.02) * 0.98)
            ch[i] += cur

        if abs(ch[i]) > max_amp:
            max_amp = abs(ch[i])

    for i in xrange(samples):
        ch[i] /= max_amp
        ch[i] *= vol

    return ch

def superimpose(src, dest, pos):
    assert(len(src) + pos <= len(dest))
    for i in xrange(0, len(src)):
        dest[i+pos] += src[i]

def normalise(left, right):
    assert(len(left) == len(right))
    max_amp = 0.0
    for s in left:
        max_amp = max(max_amp, abs(s))
    for s in right:
        max_amp = max(max_amp, abs(s))

    for i in xrange(len(left)):
        left[i] /= max_amp
        right[i] /= max_amp

lch = [0.0]*int(SAMPLE_RATE*BEAT_LENGTH*total_length)
rch = [0.0]*int(SAMPLE_RATE*BEAT_LENGTH*total_length)
print(len(notes))
print "Rendering...",
for i in xrange(len(notes)):
    print(i)
    thing = synth_note(notes[i][0] - 69, notes[i][1]/2, notes[i][2]/2, 1.0, [1,3,3,5,7,9,11,13,15,17])
    superimpose(thing, lch, int(notes[i][1]*SAMPLE_RATE*BEAT_LENGTH/2))
    superimpose(thing, rch, int(notes[i][1]*SAMPLE_RATE*BEAT_LENGTH/2))
print "Done."
print "Writing to file...",

normalise(lch, rch)

f = sopen("test.wav")

swrite_long(f, lch, rch)
sclose(f)
print "Done."
